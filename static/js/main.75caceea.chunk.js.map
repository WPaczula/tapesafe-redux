{"version":3,"sources":["components/List/styles.module.scss","components/Spinner/styles.module.scss","features/app/App/styles.module.scss","features/users/reducer/index.ts","features/users/actions/types/index.ts","store/index.ts","store/createStore.ts","features/users/api/index.ts","features/users/selectors/index.ts","features/users/actions/index.ts","components/List/index.tsx","components/Spinner/index.tsx","features/app/App/App.tsx","features/app/App/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","users","undefined","loading","error","reducer","createReducer","state","action","payload","rootReducer","combineReducers","usersReducer","api","getUsers","axios","get","selectUserState","store","selectUsers","createSelector","userState","selectLoading","loadUsersAction","createAsyncAction","loadUsers","dispatch","getState","a","request","response","success","data","results","failure","List","className","styles","map","u","key","id","value","src","picture","thumbnail","alt","name","first","last","email","phone","Spinner","props","App","React","useEffect","connect","bindActionCreators","createStore","composeWithDevTools","applyMiddleware","thunk","withExtraArgument","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.75caceea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__38N8m\",\"list__item\":\"styles_list__item__JK4BJ\",\"list__image\":\"styles_list__image__tiYV8\",\"list__user-data\":\"styles_list__user-data__2tyLz\",\"list__user-name\":\"styles_list__user-name__2Wbga\",\"list__user-phone\":\"styles_list__user-phone__rWV1j\",\"list__user-email\":\"styles_list__user-email__7dzIZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"styles_spinner__1dC-A\",\"lds-ring\":\"styles_lds-ring__1syIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__1Lyvs\"};","import { createReducer } from \"typesafe-actions\";\nimport {\n  LOAD_USERS_REQUEST,\n  LOAD_USERS_SUCCESS,\n  LOAD_USERS_FAILURE\n} from \"features/users/actions/types\";\nimport { UsersAction } from \"features/users/actions\";\nimport { UsersState } from \"features/users/types\";\n\nconst initialState: UsersState = {\n  users: undefined,\n  loading: false,\n  error: undefined\n};\n\nconst reducer = createReducer<UsersState, UsersAction>(initialState, {\n  [LOAD_USERS_REQUEST]: state => ({ ...state, loading: true }),\n  [LOAD_USERS_SUCCESS]: (state, action) => ({\n    ...state,\n    users: action.payload,\n    loading: false\n  }),\n  [LOAD_USERS_FAILURE]: (state, action) => ({\n    ...state,\n    error: action.payload,\n    loading: false\n  })\n});\n\nexport default reducer;\n","export const LOAD_USERS_REQUEST = \"users/LOAD_USERS_REQUEST\";\nexport const LOAD_USERS_SUCCESS = \"users/LOAD_USERS_SUCCESS\";\nexport const LOAD_USERS_FAILURE = \"users/LOAD_USERS_FAILURE\";\n\nexport type UsersActionTypes =\n  | typeof LOAD_USERS_REQUEST\n  | typeof LOAD_USERS_SUCCESS\n  | typeof LOAD_USERS_FAILURE;\n","import usersReducer from \"features/users/reducer\";\nimport { combineReducers } from \"redux\";\nimport { StateType } from \"typesafe-actions\";\n\nconst rootReducer = combineReducers({\n  users: usersReducer\n});\n\nexport type RootState = StateType<typeof rootReducer>;\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport store from \"store\";\nimport Api from \"features/users/api\";\nimport thunk from \"redux-thunk\";\n\nconst api = new Api();\n\nexport default () =>\n  createStore(\n    store,\n    composeWithDevTools(applyMiddleware(thunk.withExtraArgument(api)))\n  );\n","import axios, { AxiosResponse } from \"axios\";\nimport { IUserResultDto } from \"./dtos/user\";\n\nexport default class Api {\n  getUsers = (): Promise<AxiosResponse<IUserResultDto>> =>\n    axios.get(\"https://randomuser.me/api/?results=25\");\n}\n","import { createSelector } from \"reselect\";\nimport { User } from \"models/user\";\nimport { RootState } from \"store\";\nimport { UsersState } from \"features/users/types\";\n\nconst selectUserState = (store: RootState): UsersState => store.users;\n\nexport const selectUsers = createSelector(\n  selectUserState,\n  (userState: UsersState): Array<User> | undefined => userState.users\n);\n\nexport const selectLoading = createSelector(\n  selectUserState,\n  (userState: UsersState): boolean => userState.loading\n);\n","import {\n  LOAD_USERS_REQUEST,\n  LOAD_USERS_SUCCESS,\n  LOAD_USERS_FAILURE\n} from \"features/users/actions/types\";\nimport { User } from \"models/user\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { UsersState } from \"features/users/types\";\nimport Api from \"features/users/api\";\nimport { createAsyncAction, ActionType } from \"typesafe-actions\";\n\nexport const loadUsersAction = createAsyncAction(\n  LOAD_USERS_REQUEST,\n  LOAD_USERS_SUCCESS,\n  LOAD_USERS_FAILURE\n)<undefined, User[], Error>();\n\nexport const loadUsers = (): ThunkAction<\n  void,\n  UsersState,\n  Api,\n  UsersAction\n> => {\n  return async (\n    dispatch: ThunkDispatch<UsersState, Api, UsersAction>,\n    getState: () => UsersState,\n    api: Api\n  ) => {\n    dispatch(loadUsersAction.request());\n    try {\n      const response = await api.getUsers();\n\n      dispatch(loadUsersAction.success(response.data.results));\n    } catch (error) {\n      dispatch(loadUsersAction.failure(error));\n    }\n  };\n};\n\nexport type UsersAction = ActionType<typeof loadUsersAction>;\n\nexport type LoadUsersAction = typeof loadUsers;\n","import * as React from \"react\";\nimport { User } from \"models/user\";\nimport styles from \"./styles.module.scss\";\n\ninterface IListProps {\n  users: Array<User>;\n}\n\nconst List: React.FunctionComponent<IListProps> = ({ users }) => {\n  return (\n    <ul className={styles[\"list\"]}>\n      {users.map(u => (\n        <li className={styles[\"list__item\"]} key={u.id.value}>\n          <img\n            className={styles[\"list__image\"]}\n            src={u.picture.thumbnail}\n            alt={u.name.first}\n          />\n          <div className={styles[\"list__user-data\"]}>\n            <p\n              className={styles[\"list__user-name\"]}\n            >{`${u.name.first} ${u.name.last}`}</p>\n            <p className={styles[\"list__user-email\"]}>{u.email}</p>\n            <p className={styles[\"list__user-phone\"]}>{u.phone}</p>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default List;\n","import * as React from \"react\";\nimport styles from \"./styles.module.scss\";\n\ninterface ISpinnerProps {}\n\nconst Spinner: React.FunctionComponent<ISpinnerProps> = props => {\n  return (\n    <div className={styles[\"spinner\"]}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport List from \"components/List\";\nimport Spinner from \"components/Spinner\";\nimport { User } from \"models/user\";\nimport styles from \"./styles.module.scss\";\n\ninterface IAppProps {\n  loadUsers(): void;\n  users: Array<User> | undefined;\n  loading: boolean;\n}\n\nconst App: React.FunctionComponent<IAppProps> = ({\n  loadUsers,\n  users,\n  loading\n}) => {\n  React.useEffect(() => {\n    loadUsers();\n  }, [loadUsers]);\n\n  return (\n    <div className={styles[\"app\"]}>\n      {users === undefined || loading ? <Spinner /> : <List users={users} />}\n    </div>\n  );\n};\n\nexport default App;\n","import { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { selectUsers, selectLoading } from \"features/users/selectors\";\nimport { loadUsers } from \"features/users/actions\";\nimport { RootState } from \"store\";\nimport App from \"./App\";\n\nconst mapStateToProps = (state: RootState) => ({\n  users: selectUsers(state),\n  loading: selectLoading(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      loadUsers\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as React from \"react\";\nimport { Provider } from \"react-redux\";\nimport createStore from \"store/createStore\";\nimport AppComponent from \"features/app/App\";\nimport \"styles/index.scss\";\n\ninterface IAppProps {}\n\nconst App: React.FunctionComponent<IAppProps> = () => {\n  return (\n    <Provider store={createStore()}>\n      <AppComponent />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\nimport \"styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}